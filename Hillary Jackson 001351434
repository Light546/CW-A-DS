import time


# create a function which outputs whether a number is a prime number
def prime_num(number):
    if number < 2:
        return False  # any value less than two is not a prime number
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:  # modulos of num == 0 determines the remainder
            return False
    return True



def palindrome(number):
    # reverses the stack and if they are equal, then it is a palindrome
    if str(number) == str(number)[::-1]:
        return True
    else:
        return False


def special_numbers(minmax):
    special_number = []
    for number in range(minmax[0], minmax[1] + 1):
        if prime_num(number) and palindrome(number):  # need to satisfy this condition in order to be a special number
            special_number.append(number)
    return special_number, len(special_number)


def display_number(special_number, count):
    if count >= 6:  # if there is less than 6 special numbers
        print("There are", len(special_number), "special numbers between", m, "and", n, ".")
        print("The smallest special numbers are:", special_number[:3])  # outputs the first three elements in order
        print("The biggest three special numbers are:", special_number[-3:])  # outputs the last three elements in order
    else:
        print("The special numbers are less than 6 special numbers which are:", special_number)


start_time = time.time()

m, n = 1, 1_000_000  # instances of the functions created
special_number, count = special_numbers((m, n))
display_number(special_number, count)

end_time = time.time()
total_time = end_time - start_time
print("The total time it took was:", total_time)
#test cases:
# print(minmax([1, 2_000]))
# print(minmax([100, 10_000]))
# print(minmax([20_000, 80_000]))
# print(minmax([100_000, 2_000_000]))
# print(minmax([2_000_000, 9_000_000]))
# print(minmax([10_000_000, 100_000_000]))
# print(minmax([100_000_000, 400_000_000]))
# print(minmax([1_100_000_000, 15_000_000_000]))
# print(minmax([15_000_000_000, 100_000_000_000]))
# print(minmax([1, 1_000_000_000_000]))
